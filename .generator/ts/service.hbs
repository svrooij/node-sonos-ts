/**
 * Sonos {{name}} service
 *
 * Stephan van Rooij
 * https://svrooij.io
 *
 * This file is generated, do not edit manually. https://sonos.svrooij.io/
 */
{{#if data.importUrl}}
import { URL } from 'url';
{{/if}}
import BaseService from './base-service';
import { SonosUpnpError } from '../models/sonos-upnp-error';
import SonosUpnpErrors from './sonos-upnp-errors';
{{#if data.imports}}
import {
  {{#each data.imports}}{{this}},{{#unless @last}} {{/unless}}{{/each}}
} from '../models';
{{/if}}

{{#if description}}
/**
 * {{description}}
 *
 * @export
 * @class {{serviceName}}{{#if data.extended}}Base{{/if}}
 * @extends {BaseService}
 */
{{/if}}
export class {{serviceName}}{{#if data.extended}}Base{{/if}} extends BaseService{{#if eventVariables}}<{{serviceName}}Event>{{else}}<undefined>{{/if}} {
  readonly serviceNane: string = '{{name}}';

  readonly controlUrl: string = '{{controlURL}}';

  readonly eventSubUrl: string = '{{eventSubURL}}';

  readonly scpUrl: string = '{{discoveryUri}}';

  {{#if errors}}
  /**
   * Default errors and service specific errors
   *
   * @type {SonosUpnpError[]}
   * @remarks See https://svrooij.io/sonos-api-docs/#manual-documentation-file
   */
  readonly errors: SonosUpnpError[] = [
    ...SonosUpnpErrors.defaultErrors,
  {{#each errors}}
    { code: {{code}}, description: '{{description}}' },
  {{/each}}
  ];
  {{else}}
  readonly errors: SonosUpnpError[] = SonosUpnpErrors.defaultErrors;
  {{/if}}

  // #region actions
  {{#each actions}}
  {{#if description}}
  /**
   * {{description}}
  {{#if inputs}}
   *
  {{/if}}
  {{#each inputs}}
   * @param { {{~ relatedStateVariable.dataType ~}} } input.{{name}}{{#if description}} - {{{description}}}{{/if}}{{#if relatedStateVariable.allowedValues}} [ {{#each relatedStateVariable.allowedValues}}'{{this}}'{{#unless @last}} / {{/unless}}{{/each}} ]{{/if}}
  {{/each}}
  {{#if remarks}}
   * @remarks {{{remarks}}}
  {{/if}}
   */
  {{/if}}
  {{#if inputs}}
  {{name}}(input: { {{#each inputs}}{{name}}: {{relatedStateVariable.dataType}}{{#unless @last}}; {{/unless}}{{/each}} }{{{sonos_if_only_instance_id inputs ' = { InstanceID: 0 }'}}}):
  {{#if outputs}}
  Promise<{{name}}Response> { return this.SoapRequestWithBody<typeof input, {{name}}Response>('{{name}}', input); }
  {{else}}
  Promise<boolean> { return this.SoapRequestWithBodyNoResponse<typeof input>('{{name}}', input); }
  {{/if}}
  {{else}}
  {{name}}():
  {{#if outputs}}
  Promise<{{name}}Response> { return this.SoapRequest<{{name}}Response>('{{name}}'); }
  {{else}}
  Promise<boolean> { return this.SoapRequestNoResponse('{{name}}'); }
  {{/if}}
  {{/if}}
  {{#unless @last}}

  {{/unless}}
  {{/each}}
  // #endregion
  {{#if outputVariables}}

  protected responseProperties(): { [key: string]: string } {
    return {
    {{#each outputVariables}}
      {{@key}}: '{{{this}}}',
    {{/each}}
    };
  }
  {{/if}}
  {{#if eventVariables}}

  // Event properties from service description.
  protected eventProperties(): { [key: string]: string } {
    return {
    {{#each eventVariables}}
      {{name}}: '{{#if (or (are_equal name 'Volume') (are_equal name 'Mute'))}}{{#if (are_equal name 'Mute')}}ChannelValue<boolean>{{else}}ChannelValue<number>{{/if}}{{else}}{{{dataType}}}{{/if}}',
    {{/each}}
    };
  }
  {{else}}

  // No properties in service description, throw error on retrieval.
  protected eventProperties(): { [key: string]: string } {
    throw new Error('No event properties in service definition');
  }
  {{/if}}
}

// Generated responses
{{#each actions}}
{{#if outputs}}
{{#unless (are_equal name 'Browse')}}
export interface {{name}}Response {
  {{#each outputs}}
  {{name}}: {{{relatedStateVariable.dataType}}};
  {{/each}}
}

{{/unless}}
{{/if}}
{{/each}}
{{#if eventVariables}}
// Strong type event
export interface {{serviceName}}Event {
  {{#each eventVariables}}
  {{name}}?: {{#if (or (are_equal name 'Volume') (are_equal name 'Mute'))}}{{#if (are_equal name 'Mute')}}ChannelValue<boolean>{{else}}ChannelValue<number>{{/if}}{{else}}{{{dataType}}}{{/if}};
  {{/each}}
}
{{/if}}